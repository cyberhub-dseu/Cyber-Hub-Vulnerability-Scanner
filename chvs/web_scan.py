import requests
import pyfiglet



def display_banner():
    try:
        # Using default font
        banner = pyfiglet.figlet_format("C y b e r   H u b")
        print(banner)
    except Exception as e:
        print(f"Error displaying banner: {str(e)}")

def display_disclaimer():
    print("\nDISCLAIMER:")
    print("-" * 50)
    print("This tool is intended for educational purposes only. Use responsibly and with the permission of the target owner.")
    print("Unauthorized scanning of systems without permission is illegal.")
    print("The developer of this tool is not responsible for any misuse or illegal activities carried out using this tool.\n")



# Call the function
display_banner()



# Function to test SQL Injection
def test_sql_injection(target):
    vulnerable = False
    payloads = ["' OR 1=1--", "' OR 'a'='a", "' OR 1=1#", "' UNION SELECT NULL--"]

    for payload in payloads:
        test_url = f"{target}?id={payload}"
        try:
            print(f"Testing SQL Injection with payload: {payload}")
            response = requests.get(test_url, timeout=5)
            
            if "syntax error" in response.text.lower() or "sql" in response.text.lower():
                vulnerable = True
                print(f"Vulnerable to SQL Injection with payload: {payload}")
                break
        except requests.Timeout:
            print(f"Request to {test_url} timed out.")
        except requests.ConnectionError:
            print(f"Failed to connect to {test_url}.")
        except requests.RequestException as e:
            print(f"An error occurred while testing {test_url}: {str(e)}")

    return vulnerable

# Function to test Cross-Site Scripting (XSS)
def test_xss(target):
    vulnerable = False
    payloads = ["<script>alert('XSS')</script>", "'<img src=x onerror=alert('XSS')>"]

    for payload in payloads:
        test_url = f"{target}?q={payload}"
        try:
            print(f"Testing XSS with payload: {payload}")
            response = requests.get(test_url, timeout=5)
            
            if payload in response.text:
                vulnerable = True
                print(f"Vulnerable to XSS with payload: {payload}")
                break
        except requests.Timeout:
            print(f"Request to {test_url} timed out.")
        except requests.ConnectionError:
            print(f"Failed to connect to {test_url}.")
        except requests.RequestException as e:
            print(f"An error occurred while testing {test_url}: {str(e)}")

    return vulnerable

# Function to test Cross-Site Request Forgery (CSRF)
def test_csrf(target):
    # This is a simplified test and might need more sophisticated approaches
    csrf_token = "csrf_token"  # This is just a placeholder
    test_url = f"{target}/submit"
    payload = {"data": "test", "csrf_token": csrf_token}
    
    try:
        print(f"Testing CSRF with payload: {payload}")
        response = requests.post(test_url, data=payload, timeout=5)
        
        if response.status_code == 200:
            # A real test would require checking for CSRF token validation
            print(f"CSRF vulnerability detected with payload: {payload}")
            return True
    except requests.Timeout:
        print(f"Request to {test_url} timed out.")
    except requests.ConnectionError:
        print(f"Failed to connect to {test_url}.")
    except requests.RequestException as e:
        print(f"An error occurred while testing {test_url}: {str(e)}")

    return False

# Web vulnerability scanner function
def scan_web(target):
    results = []
    
    try:
        print(f"Scanning target: {target}")
        response = requests.get(target, timeout=5)
        print(f"Status Code: {response.status_code}")
        
        # Check for missing security headers
        if 'Content-Security-Policy' not in response.headers:
            results.append({
                'vulnerability': 'Content Security Policy Missing',
                'severity': 'High',
                'details': 'The response does not include a Content-Security-Policy header.'
            })

        if 'Strict-Transport-Security' not in response.headers:
            results.append({
                'vulnerability': 'HSTS Header Missing',
                'severity': 'Medium',
                'details': 'The response does not include a Strict-Transport-Security header.'
            })
        
        if 'X-Content-Type-Options' not in response.headers:
            results.append({
                'vulnerability': 'X-Content-Type-Options Header Missing',
                'severity': 'Low',
                'details': 'The response does not include the X-Content-Type-Options header.'
            })
        
        # Test for SQL Injection
        if test_sql_injection(target):
            results.append({
                'vulnerability': 'SQL Injection Detected',
                'severity': 'Critical',
                'details': 'SQL injection vulnerability detected using basic payloads.'
            })
        
        # Test for XSS
        if test_xss(target):
            results.append({
                'vulnerability': 'XSS Detected',
                'severity': 'High',
                'details': 'Cross-Site Scripting vulnerability detected using basic payloads.'
            })
        
        # Test for CSRF
        if test_csrf(target):
            results.append({
                'vulnerability': 'CSRF Detected',
                'severity': 'Critical',
                'details': 'Cross-Site Request Forgery vulnerability detected.'
            })

    except requests.Timeout:
        print(f"Request to {target} timed out.")
        results.append({
            'error': 'Request timed out',
            'target': target
        })
    
    except requests.ConnectionError:
        print(f"Failed to connect to {target}.")
        results.append({
            'error': 'Connection failed',
            'target': target
        })
    
    except requests.RequestException as e:
        print(f"An error occurred while accessing {target}: {str(e)}")
        results.append({
            'error': f"An error occurred: {str(e)}",
            'target': target
        })

    return results

# Main function to run the scanner
def main():
    # Display the banner and disclaimer
    display_banner()
    display_disclaimer()
    # Example target
    target = "https://www.example.com"
    
    # Run the scan
    scan_results = scan_web(target)
    print("\nScan Results:")
    for result in scan_results:
        print(result)

if __name__ == "__main__":
    main()
